// <auto-generated />
using System;
using Enigma.DatingNet.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Enigma.DatingNet.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Enigma.DatingNet.Entities.MasterInterest", b =>
                {
                    b.Property<Guid>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("interest_id");

                    b.Property<string>("Interest")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interest");

                    b.HasKey("InterestId");

                    b.ToTable("m_interest");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberContactInformation", b =>
                {
                    b.Property<Guid>("MemberContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("m_member_contact_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("InstagramId")
                        .HasColumnType("text")
                        .HasColumnName("instagram_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone_number");

                    b.Property<string>("TwitterId")
                        .HasColumnType("text")
                        .HasColumnName("twitter_id");

                    b.HasKey("MemberContactId");

                    b.HasIndex("MemberId");

                    b.ToTable("m_member_contact_info");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberInterest", b =>
                {
                    b.Property<Guid>("MemberInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("member_interest_id");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("uuid")
                        .HasColumnName("interest_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.HasKey("MemberInterestId");

                    b.HasIndex("InterestId");

                    b.HasIndex("MemberId");

                    b.ToTable("m_member_interest");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberPartner", b =>
                {
                    b.Property<Guid>("MemberPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("member_partner_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("MemberPartnerId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("m_member_partner");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberPersonalInformation", b =>
                {
                    b.Property<Guid>("PersonalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("personal_info_id");

                    b.Property<DateOnly>("Bod")
                        .HasColumnType("date")
                        .HasColumnName("bod");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RecentPhotoPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recent_photo_path");

                    b.Property<string>("SelfDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("self_description");

                    b.HasKey("PersonalInformationId");

                    b.HasIndex("MemberId");

                    b.ToTable("m_member_personal_info");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberPreferences", b =>
                {
                    b.Property<Guid>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("preference_id");

                    b.Property<string>("LookingForDomicile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("looking_for_domicile");

                    b.Property<int>("LookingForEndAge")
                        .HasColumnType("integer")
                        .HasColumnName("looking_for_end_age");

                    b.Property<string>("LookingForGender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("looking_for_gender");

                    b.Property<int>("LookingForStartAge")
                        .HasColumnType("integer")
                        .HasColumnName("looking_for_start_age");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.HasKey("PreferenceId");

                    b.HasIndex("MemberId");

                    b.ToTable("m_member_preferences");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberUserAccess", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_status");

                    b.HasKey("MemberId");

                    b.ToTable("m_member_user_access");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberContactInformation", b =>
                {
                    b.HasOne("Enigma.DatingNet.Entities.MemberUserAccess", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberInterest", b =>
                {
                    b.HasOne("Enigma.DatingNet.Entities.MasterInterest", "Interest")
                        .WithMany("MemberInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enigma.DatingNet.Entities.MemberUserAccess", "Member")
                        .WithMany("MemberInterests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberPartner", b =>
                {
                    b.HasOne("Enigma.DatingNet.Entities.MemberUserAccess", "Member")
                        .WithMany("Members")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Enigma.DatingNet.Entities.MemberUserAccess", "Partner")
                        .WithMany("Partners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberPersonalInformation", b =>
                {
                    b.HasOne("Enigma.DatingNet.Entities.MemberUserAccess", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberPreferences", b =>
                {
                    b.HasOne("Enigma.DatingNet.Entities.MemberUserAccess", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MasterInterest", b =>
                {
                    b.Navigation("MemberInterests");
                });

            modelBuilder.Entity("Enigma.DatingNet.Entities.MemberUserAccess", b =>
                {
                    b.Navigation("MemberInterests");

                    b.Navigation("Members");

                    b.Navigation("Partners");
                });
#pragma warning restore 612, 618
        }
    }
}
